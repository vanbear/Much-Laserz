<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_emitter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu[0] = "Start";
menu[1] = "About";
menu[2] = "Exit";

space = 64;
mpos = 0;
x = view_wview[0]/2 - string_width(menu[2])

gamepad_set_axis_deadzone(0,0.4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var move_up = keyboard_check_pressed(vk_up) ||   gamepad_button_check_pressed(0,gp_padu);
var move_down = keyboard_check_pressed(vk_down) ||  gamepad_button_check_pressed(0,gp_padd);

var select_key = keyboard_check_pressed(vk_enter) ||  gamepad_button_check_pressed(0,gp_face1) || gamepad_button_check_pressed(0,gp_start);

var move = 0;

if move_up 
{
    move = -1;
}

if move_down 
{
    move = 1;
}

if (move != 0)
{
    mpos += move;
    if (mpos &lt; 0) mpos = array_length_1d(menu) - 1;
    if (mpos &gt; array_length_1d(menu) - 1) mpos = 0;
}

var push;
push = max(select_key,0);

if (push == 1) 
{
    scr_menu();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnt_arcade);
draw_set_color(c_white);

var xx = view_wview[0]/2
for (var m = 0; m &lt; array_length_1d(menu); m ++)
{
    if (m != mpos)
       draw_text(xx, y+(m*space), string(menu[m]));
    else
        draw_text(xx, y+(m*space), string("&gt; "+menu[m]+" &lt;"));
}

draw_sprite(spr_logo, 0, view_wview[0]/2, 10+sprite_get_height(spr_logo));


//draw_sprite(sprite_index, 0, x, y + mpos * space);

draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
