<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// deklaracja zmiennych
grav = 0.5; // siła grawitacji
spd = 5; // predkosc
jump_speed = 8; // skok
hspd = 0; // predkosc pozioma
vspd = 0; // predkosc pionowa
max_vertical_speed = 15; // maksymalna predkosc pionowa
frict = 2; // tarcie
canmove = true; //czy postac moze wykonywac akcje, potrzebne do smierci

// predkosc przenoszenia przez ruchome platformy
hsp_carry = 0;
vsp_carry = 0;
hsp_final = 0;

gamepad_set_axis_deadzone(0,0.4); // tolerancja galek analogowych

down_key = 0; // czy wcisniety zostal klawisz w dol

last_dir = 1; // ostatni kierunek
last_vspd = vspd; // ostatnia wartos predkosci pionowej

player_sound_emitter = audio_emitter_create();
audio_emitter_gain(player_sound_emitter,.3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// death
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// last_vspd
last_vspd = vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset i pauza

var reset_key = keyboard_check(ord('R')) || (gamepad_button_check_pressed(0,gp_select));
var esc_key = keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0,gp_start);

if reset_key
    room_restart();

if esc_key
   instance_create(0,0,obj_pause);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fizyka sterowania

// wszystkie zmienne uzywane w tym kodzie zadeklarowane sa w
// (obj_player &gt; Events &gt; Crate &gt; Deklaracja zmiennych)

// przypisanie klawiszy do zmiennych

    var right_key = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0);                   //klaiwsz poruszsania sie w prawo
    var left_key = keyboard_check(vk_left) || (gamepad_axis_value(0,gp_axislh) &lt; 0);                    //klaiwsz poruszsania sie w lewo
    down_key = keyboard_check(vk_down) || (gamepad_axis_value(0,gp_axislv) &gt; 0);                    //klaiwsz w dol
    
    var jump_key = keyboard_check_pressed(vk_up) || (gamepad_button_check_pressed(0,gp_face1));       //klaiwsz skoku
    var jump_key_hold = keyboard_check(vk_up) || (gamepad_button_check(0,gp_face1));
    
    var use_key = keyboard_check_pressed(ord('X')) || (gamepad_button_check_pressed(0,gp_face2));        //klawisze interakcji 1
    var use_key_hold = keyboard_check(ord('X')) || (gamepad_button_check(0,gp_face2));
    
    var use_key2 = keyboard_check_pressed(ord('Z')) || (gamepad_button_check_pressed(0,gp_face3));       //klawisze interakcji 2
    var use_key_hold2 = keyboard_check(ord('Z')) || (gamepad_button_check(0,gp_face3));


    var last_key=0;

    
// kolizja z podłożem
if (place_meeting(x, y+1, obj_wall))  //co sie dzieje, gdy pod graczem jest podloze
{
    //vspd = 0; // predkosc pionowa rowna zeru, gracz nie porusza sie pionowo
    
    // skok
    if (jump_key &amp;&amp; canmove)
    {
        vspd = -jump_speed; // predkosc pionowa rowna "predkosci skoku", wartosc ujemna, poniewaz chcemy poruszac sie w gore
    }
}
else // co sie dzieje, kiedy jestesmy w powietrzu
{
    // grwaitacja
    if (vspd &lt; max_vertical_speed) 
    { // jezeli predkosc pionowa mniejsza od 10, jezeli jest rowna 10, nie dodajemy juz predkosci
        vspd += grav;   // zwiekszaj predkosc spadania o wartosc grawitacji
    }
}
if (vspd &lt; 0 &amp;&amp; !jump_key_hold &amp;&amp; canmove)
{
    vspd = max(vspd,-jump_speed/4);
}


// poruszanie sie w prawo
if (right_key &amp;&amp; canmove) // po wcisnieciu klawisza
{
    hspd = spd; // dodajemy przypisana predkosc
}



// poruszanie sie w lewo
if (left_key &amp;&amp; canmove) // po wcisnieciu klawisza
{
    hspd = -spd; // dodajemy przypisana predkosc
}

    
// gdy sie nie porusza
if ((!right_key &amp;&amp; !left_key &amp;&amp; canmove) || (right_key &amp;&amp; left_key &amp;&amp; canmove))  // gdy nie wciskamy zadnego klawisza poruszsania na boki lub wciskamy oba
{
    if (hspd != 0)
    {
        if (hspd &gt; 0) //slizganie sie o wartosc podana jako frict (friction - tarcie)
           if (hspd == 1) hspd =0;
           else  hspd-=frict;
        else
            if (hspd == -1) hspd =0;
           else  hspd+=frict;
    }
}




var hsp_final = hspd + hsp_carry;
hsp_carry = 0;
// kolizje ze scianami poziomo (poziomo MUSI byc sprawdzane przed pionem!!!)
if (place_meeting(x+hsp_final, y, obj_wall))
{
    while (!place_meeting(x+sign(hsp_final), y, obj_wall)) // sprawdza, czy dotykamy te sciane, sign zwraca wartosc 1 lub -1, w zaleznosci w ktora strone sie poruszamy, jezeli nie to...
    {
        x += sign(hsp_final); // poruszamy sie o ten jeden piksel w dana strone, az dotkniemy sciany
    }
    hspd = 0;
    hsp_final = 0; // gdy juz bedziemy przy scianie, zatrzymaj sie
}
// cala ta czesc to zabezpieczenie przed pojawieniem sie wewnatrz sciany

// poruszanie sie w poziomie
x+=hsp_final;


// kolizje ze scianami pionowo
if (place_meeting(x, y+vspd, obj_wall)) //sprawdza, czy w kolejnym kroku w poziomie znajduje sie sciana
{
    while (!place_meeting(x, y+sign(vspd), obj_wall)) // sprawdza, czy dotykamy te sciane, sign zwraca wartosc 1 lub -1, w zaleznosci w ktora strone sie poruszamy, jezeli nie to...
    {
        y += sign(vspd); // poruszamy sie o ten jeden piksel w dana strone, az dotkniemy sciany
    }
    vspd = 0; // gdy juz bedziemy przy scianie, zatrzymaj sie
}
// cala ta czesc to zabezpieczenie przed pojawieniem sie wewnatrz sciany



// poruszanie sie w pionie
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///interakcja z obj_wheel
if (use_key_hold &amp;&amp; canmove)
{   
    with (instance_place(x, y, obj_wheel))
    {
        last_key=use_key_hold;
        dir=0;
        if !active
            active=true;
    }
}
if (use_key_hold2 &amp;&amp; canmove)
{   
    with (instance_place(x, y, obj_wheel))
    {
        last_key=use_key_hold2;
        dir=1;
        if !active
            active=true;
    }
}
if (!last_key) or (!place_meeting(x,y,obj_wheel))
{
    with(obj_wheel)
        active=false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// interakcja z obj_power

with (instance_place(x, y, obj_power))
{
    if (use_key &amp;&amp; other.canmove) or (use_key2 &amp;&amp; other.canmove)
    {
    //if (place_meeting(x,y,obj_power))
    //{
        if (active) active=false;
        else active=true; 
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// interakcja z obj_movepanel

if (use_key_hold &amp;&amp; canmove)
{   
    with (instance_place(x, y, obj_movepanel))
    {
        last_key=use_key_hold;
        dir=0;
        if !active
            active=true;
    }
}
if (use_key_hold2 &amp;&amp; canmove)
{   
    with (instance_place(x, y, obj_movepanel))
    {
        last_key=use_key_hold2;
        dir=1;
        if !active
            active=true;
    }
}
if (!last_key) or (!place_meeting(x,y,obj_movepanel) or (!canmove))
{
    with(obj_movepanel)
        active=false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// interakcja z obj_door

with (instance_place(x, y, obj_door))
{
    if (use_key &amp;&amp; other.canmove) or (use_key2 &amp;&amp; other.canmove)
    {
        if (opened) 
        {
            show_debug_message("Level completed");
            instance_create(0,0,obj_level_complete);
        }
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// dzwieki

if (last_vspd &gt; 0 &amp;&amp; vspd == 0) 
{
    audio_play_sound_on(player_sound_emitter,snd_player_landing,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// animacje
randomize();

image_speed = 0.1;

var blink_length = 5;
var blink_current = 0;

if hspd!=0 image_xscale = sign(hspd);

if (place_meeting(x,y+1,obj_wall) || place_meeting(x,y+1,obj_platform))
{
    if (hspd!=0) sprite_index = spr_player_run;
    else 
    {
    // idle
       sprite_index = spr_player_idle; 
    // idle - end
    }
}

if (vspd != 0) sprite_index = spr_player_jump;

if (!canmove) sprite_index = spr_player_dead;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// interakcja - rysowanie obramowania


// interakcja z włącznikiem
if (place_meeting(x, y, obj_power))
{
    inst = instance_place(x, y, obj_power);
    draw_focus_outline(inst);
}


//interakcja z kołem do obracania
if (place_meeting(x, y, obj_wheel))
{
    inst = instance_place(x, y, obj_wheel);
    draw_focus_outline(inst);
}


//interakcja z kołem do obracania
if (place_meeting(x, y, obj_movepanel))
{
    inst = instance_place(x, y, obj_movepanel);
    draw_focus_outline(inst);
}

if (place_meeting(x, y, obj_door))
{

    inst = instance_place(x, y, obj_door);
    if (inst.opened)
       draw_focus_outline(inst);
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
