<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// deklaracja zmiennych
grav = 0.5; // siła grawitacji
spd = 5; // predkosc
jump_speed = 8; // skok
hspd = 0; // predkosc pozioma
vspd = 0; // predkosc pionowa
max_vertical_speed = 15;
frict = 2;

gamepad_set_axis_deadzone(0,0.4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fizyka sterowania

// wszystkie zmienne uzywane w tym kodzie zadeklarowane sa w
// (obj_player &gt; Events &gt; Crate &gt; Deklaracja zmiennych)

// przypisanie klawiszy do zmiennych

    var right_key = keyboard_check(ord('D')) || (gamepad_axis_value(0,gp_axislh) &gt; 0);   //klaiwsz poruszsania sie w prawo
    var left_key = keyboard_check(ord('A')) || (gamepad_axis_value(0,gp_axislh) &lt; 0);    //klaiwsz poruszsania sie w lewo
    var jump_key = keyboard_check_pressed(ord('W')) || (gamepad_button_check_pressed(0,gp_face1));       //klaiwsz skoku
    var dash_key = keyboard_check(vk_shift) || (gamepad_button_value(0,gp_shoulderrb)&gt;0.2); 
    var use_key = keyboard_check_pressed(ord('E')) || (gamepad_button_check_pressed(0,gp_face3));
    var use_key_hold = keyboard_check(ord('E')) || (gamepad_button_check(0,gp_face3));


// kolizja z podłożem
if (place_meeting(x, y+1, obj_wall))  //co sie dzieje, gdy pod graczem jest podloze
{
    vspd = 0; // predkosc pionowa rowna zeru, gracz nie porusza sie pionowo
    
    // skok
    if (jump_key)
    {
        vspd = -jump_speed; // predkosc pionowa rowna "predkosci skoku", wartosc ujemna, poniewaz chcemy poruszac sie w gore
    }
}
else // co sie dzieje, kiedy jestesmy w powietrzu
{
    // grwaitacja
    if (vspd &lt; max_vertical_speed) 
    { // jezeli predkosc pionowa mniejsza od 10, jezeli jest rowna 10, nie dodajemy juz predkosci
        vspd += grav;   // zwiekszaj predkosc spadania o wartosc grawitacji
    }
}

// poruszanie sie w prawo
if (right_key) // po wcisnieciu klawisza
{
    hspd = spd; // dodajemy przypisana predkosc
}

// poruszanie sie w lewo
if (left_key) // po wcisnieciu klawisza
{
    hspd = -spd; // dodajemy przypisana predkosc
}

if (dash_key) // po wcisnieciu klawisza
    spd=10;
else
    spd=5;


// gdy sie nie porusza
if ((!right_key &amp;&amp; !left_key) || (right_key &amp;&amp; left_key))  // gdy nie wciskamy zadnego klawisza poruszsania na boki lub wciskamy oba
{
    if (hspd != 0)
    {
        if (hspd &gt; 0) //slizganie sie o wartosc podana jako frict (friction - tarcie)
                hspd-=frict;
        else
                hspd+=frict;
    }
}


// interakcja z włącznikiem
if (use_key)
{
    //if (place_meeting(x,y,obj_power))
    //{
        with (instance_place(x, y, obj_power))
        {
                if (active) active=false;
                else active=true;
        }    
}


//interakcja z kołem do obracania
if (use_key_hold)
{   
    with (instance_place(x, y, obj_wheel))
    {
        if !active
            active=true;
    }
}
if (!use_key_hold) or (!place_meeting(x,y,obj_wheel))
{
    with(obj_wheel)
        active=false;
}


// kolizje ze scianami poziomo (poziomo MUSI byc sprawdzane przed pionem!!!)
if (place_meeting(x+hspd, y, obj_wall))
{
    while (!place_meeting(x+sign(hspd), y, obj_wall)) // sprawdza, czy dotykamy te sciane, sign zwraca wartosc 1 lub -1, w zaleznosci w ktora strone sie poruszamy, jezeli nie to...
    {
        x += sign(hspd); // poruszamy sie o ten jeden piksel w dana strone, az dotkniemy sciany
    }
    hspd = 0; // gdy juz bedziemy przy scianie, zatrzymaj sie
}
// cala ta czesc to zabezpieczenie przed pojawieniem sie wewnatrz sciany

// poruszanie sie w poziomie
x+=hspd;


// kolizje ze scianami pionowo
if (place_meeting(x, y+vspd, obj_wall)) //sprawdza, czy w kolejnym kroku w poziomie znajduje sie sciana
{
    while (!place_meeting(x, y+sign(vspd), obj_wall)) // sprawdza, czy dotykamy te sciane, sign zwraca wartosc 1 lub -1, w zaleznosci w ktora strone sie poruszamy, jezeli nie to...
    {
        y += sign(vspd); // poruszamy sie o ten jeden piksel w dana strone, az dotkniemy sciany
    }
    vspd = 0; // gdy juz bedziemy przy scianie, zatrzymaj sie
}
// cala ta czesc to zabezpieczenie przed pojawieniem sie wewnatrz sciany

// poruszanie sie w pionie
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
